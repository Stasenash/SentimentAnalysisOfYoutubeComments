import Comments_downloader
import Additionally
import YouTubeParser
import Essences
import DB
from data_analyzer import DataAnalyzer

from tqdm import tqdm
import os
import json
import io
import pymorphy2
import matplotlib.pyplot as plt

#%%  
class FistBranch_actions():
    
    def __init__(self, link):
        
        self.link = link
        self.symbols = ['"', "'", '(', ')', ':', '\n', '~', '`', '¬ª', '¬´', '@', 'üë§', 'Ôºç', 'Ôºü']
        self.youtube = YouTubeParser.YouTubeAPI()
        self.stopwords = ['—ç—Ç–æ', '–µ—â–µ', '–µ—â—ë', '–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É']
        self.morph = pymorphy2.MorphAnalyzer()
        self.subs = Additionally.GetDescryption()
        self.id_video = self.youtube.parse_vid_from_url(self.link)
        self.sentiment = {'EngModel': 87.628866, 'RusModel': 76.14678899, 'DostModel': 56.40243902}
        self.analysis_string = ''

        try:
            video_database = DB.Video_DB('VideoDatabase')
            self.communication = DB.Interaction(video_database)
            self.communication.create_table('Videoclips')
            self.communication.create_table_for_comments()
        except:
            pass
        
    def data_full_check(self, dictionary):
        
        try:
            video_id = dictionary['id']
        except:
            video_id = '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        try:
            channel_name = dictionary['snippet']['channelTitle']           
        except:
            channel_name = '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'           
        try:
            video_name = dictionary['snippet']['title']
        except:
            video_name = '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        try:
            commentCount = dictionary['statistics']['commentCount']
        except:
            commentCount = '0'
        try:
            likesCount = dictionary['statistics']['likeCount']
        except:
            likesCount = '0'
        try:
            dislikesCount = dictionary['statistics']['dislikeCount']
        except:
            dislikesCount = '0'
        try:
            relation = str(f"""–ª–∞–π–∫–æ–≤ - {round(int(dictionary['statistics']['likeCount'])/(int(dictionary['statistics']['likeCount'])+int(dictionary['statistics']['dislikeCount']))*100)}%, –¥–∏–∑–ª–∞–π–∫–æ–≤ - {round(int(dictionary['statistics']['dislikeCount'])/(int(dictionary['statistics']['likeCount'])+int(dictionary['statistics']['dislikeCount']))*100)}%""")
        except:
            relation = '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        try:
            viewsCount = dictionary['statistics']['viewCount']
        except:
            viewsCount = '0'
        try:
            tagsCount = len(dictionary['snippet']['tags'])
        except:
            tagsCount = '0'
        try:
            video_duration = dictionary['contentDetails']['duration']
        except:
            video_duration = '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        try:
            video_description = dictionary['snippet']['description']
        except:
            video_description = '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        
        return [video_id, channel_name, video_name, commentCount, likesCount, dislikesCount, relation, viewsCount, tagsCount, video_duration, video_description]
   
    
    def write_to_the_database(self):
        
        items = self.data_full_check(self.youtube.all_info)
        
        video_object = Essences.Video(items[0], items[1],
                                   items[2], self.youtube.language, 
                                   items[3], items[4], items[5],
                                   items[6], items[7], items[8], items[9], 
                                   items[10], self.analysis_string)
    
        self.communication.input_data(video_object)
        
    
    def create_folders(self):
        channel_dir = f"Analysis/{self.youtube.all_info['snippet']['channelId']}_{self.youtube.all_info['snippet']['channelTitle']}"

        if not os.path.exists(channel_dir):
            os.mkdir(channel_dir)
        else:
            pass
            
        return channel_dir
    
    
    def lead_to_initial_form(self, variable):
        
        words = variable.lower().split()
        string = ""
        norm_tokens = []
        
        for i in tqdm(words):
            nf = self.morph.parse(i)[0].normal_form
            norm_tokens.append(nf)
            
        norm_tokens = [i for i in norm_tokens if i not in self.stopwords]
        
        for i in norm_tokens:
            string += i + " "
            
        return string
    
        
    def get_info_about_video(self):
        
        self.youtube.get_video_info(self.id_video)
        
        
    def get_comments_text(self):
        
        comments = []
        self.channel_dir = self.create_folders()
        file_name = f'{self.channel_dir}/{self.id_video}.json'

        if os.path.exists(file_name):
            pass
        
        args = ['-y', f" {self.id_video}", '-o', file_name, '-l', '10000']
        
        Comments_downloader.main(args)
         
        with io.open(file_name, 'r', encoding='utf8') as fj:
            data = fj.readlines()
            

            for line in data:  
                dictionary = json.loads(line)
                comments.append(dictionary['text'])
                
            for comment in tqdm(comments):
                for n in self.symbols:                    
                    clear_comment = comment.replace(n, '')
                
                try:
                    self.communication.insert_into_comments_table(self.id_video, clear_comment)
                    
                except:
                    pass

                                          
    def sentiment_eng_analysis(self, massive_comments):
        
        if massive_comments == False:
            return 'There are no comments on the video, and we cannot analyze it at the moment'
        else:
            analysis_dictionary = DataAnalyzer.get_eng_analysis(massive_comments)
            self.analysis_string += f"–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ) - {analysis_dictionary['positive']}, –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π(–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ) - {analysis_dictionary['negative']}"
        
    
    def get_histogram_for_analyzing_the_tone_of_comments_first_neural_network(self, value_1, value_2):
        
            x = ['positive', 'negative']
            y = [value_1, value_2]
        
            fig, ax = plt.subplots()
    
            ax.bar(x, y, width = 0.15)
    
            ax.set_facecolor('seashell')
            fig.set_facecolor('floralwhite')
            fig.set_figwidth(6) 
            ax.set_title('–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–µ—Ä–≤–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏')
            fig.set_figheight(6)   
            
            plt.savefig(f'Figures/fig_video_{self.id_video}_1')
            
            
    def sentiment_rus_analysis(self, massive_comments):
        
        if massive_comments == False:
            return 'There are no comments on the video, and we cannot analyze it at the moment'
        else:
            analysis_dictionary = DataAnalyzer.get_rus_analysis(massive_comments)
            self.analysis_string += f"–ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ) - {analysis_dictionary['positive']}, –∞–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π(–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ) - {analysis_dictionary['negative']}"
        
    
    def get_histogram_for_analyzing_the_tone_of_comments_second_neural_network(self, value_1, value_2):
        
            x = ['positive', 'negative']
            y = [value_1, value_2]
        
            fig, ax = plt.subplots()
    
            ax.bar(x, y, width = 0.15)
    
            ax.set_facecolor('seashell')
            fig.set_facecolor('floralwhite')
            fig.set_figwidth(6) 
            ax.set_title('–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤—Ç–æ—Ä–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏')
            fig.set_figheight(6)   
            
            plt.savefig(f'Figures/fig_video_{self.id_video}_2')
            
            
    def sentiment_dost_analysis(self, massive_comments):
        
        if massive_comments == False:
            return 'There are no comments on the video, and we cannot analyze it at the moment'
        else:
            analysis_dictionary = DataAnalyzer.get_dost_analysis(massive_comments)
            self.analysis_string += f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ—Ç—å–µ–π(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ) - {analysis_dictionary['positive']}, –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ—Ç—å–µ–π(–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ) - {analysis_dictionary['negative']}"


    def get_histogram_for_analyzing_the_tone_of_comments_third_neural_network(self, value_1, value_2):

            x = ['positive', 'negative']
            y = [value_1, value_2]
        
            fig, ax = plt.subplots()
    
            ax.bar(x, y, width = 0.15)
    
            ax.set_facecolor('seashell')
            fig.set_facecolor('floralwhite')
            fig.set_figwidth(6) 
            ax.set_title('–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ç—Ä–µ—Ç—å–µ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏')
            fig.set_figheight(6)   
            
            plt.savefig(f'Figures/fig_video_{self.id_video}_3')
            
            
            
    def make_WorldCloud_picture(self): 
        
        exist = self.communication.print_comments(self.id_video)
        clear_text = ''
        
        if exist == False:
            print('There are no comments on the video, and we cannot analyze it at the moment')
        
        else:
            for comment in exist:
                comment_text = comment[1]
                clear_text += self.lead_to_initial_form(comment_text)
            self.subs.get_WordCloud(clear_text)
           
        
    def analysis_of_comments_for_a_single_video(self):
        actuality = self.communication.check_actuality_by_id(self.id_video)
        massive_comments = []
        if actuality == False:
            
            try:
                self.get_info_about_video()
                self.get_comments_text()

                massive_data = self.communication.print_comments(self.id_video)

                for comments in massive_data:
                    massive_comments.append(comments[1])

                self.sentiment_eng_analysis(massive_comments)
                self.sentiment_rus_analysis(massive_comments)
                self.sentiment_dost_analysis(massive_comments)

                self.write_to_the_database()
                
                self.analysis_string = ''
                
                               
            except:
                 print('There are no comments on the video, and we cannot analyze it at the moment')
            
        else:
            pass
        
        video = self.communication.extract_obj_by_id(self.id_video)
        
        relation = video[0][7].replace('\n', '\n')
        video_description = video[0][11].replace('\n', '\n')
        
        video_info = f"""
    
ID –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞: {video[0][0]}
–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {video[0][1]}
–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞: {video[0][2]}   
–Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {video[0][3]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {video[0][4]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {video[0][5]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: {video[0][6]}
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤: {relation}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video[0][8]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ tags: {video[0][9]}
–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞: {video[0][10]}
–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞: 
    
{video_description} """
        
        print(video_info)
        
        analysis = video[0][-2]
        string = analysis.split('-')

        self.get_histogram_for_analyzing_the_tone_of_comments_first_neural_network(float(string[1][1:6]), float(string[2][1:6]))
        self.get_histogram_for_analyzing_the_tone_of_comments_second_neural_network(float(string[3][1:6]), float(string[4][1:6]))
        self.get_histogram_for_analyzing_the_tone_of_comments_third_neural_network(float(string[5][1:6]), float(string[6][1:6]))
        
        string = f"""–¢–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {self.sentiment['EngModel']}
        –¢–æ—á–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {self.sentiment['RusModel']}
        –¢–æ—á–Ω–æ—Å—Ç—å —Ç—Ä–µ—Ç—å–µ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {self.sentiment['DostModel']}"""
        
        print(string)
            
# #%%
first = FistBranch_actions('https://www.youtube.com/watch?v=YUMDorxFHHQ&t=2s')
# #%%
first.analysis_of_comments_for_a_single_video()
# #%%
first.make_WorldCloud_picture()